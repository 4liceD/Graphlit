float lilTooningNoSaturateScale(float aascale, float value, float border, float blur)
{
    float borderMin = saturate(border - blur * 0.5);
    float borderMax = saturate(border + blur * 0.5);
    return (value - borderMin) / saturate(borderMax - borderMin + fwidth(value) * aascale);
}
float lilTooningNoSaturateScale(float aascale, float value, float border, float blur, float borderRange)
{
    float borderMin = saturate(border - blur * 0.5 - borderRange);
    float borderMax = saturate(border + blur * 0.5);
    return (value - borderMin) / saturate(borderMax - borderMin);
}

#pragma skip_variants SHADOWS_SOFT SHADOWS_CUBE POINT_COOKIE LIGHTMAP_ON
#define CUSTOM_LIGHT
LIGHT_FUNC // args: light, fragData, giInput, surf, giOutput
{
    half3 col = light.color;
    half defaultAtten = light.attenuation;
    #if defined(SHADOWS_SCREEN)
        defaultAtten = 1;
    #endif

    const float antialias = 1.0;
    half4 lns = 1.0;

    // layer 1
    lns.x = saturate(dot(light.direction, giInput.normalWS) * 0.5 + 0.5);
    lns.x *= lerp(defaultAtten, light.attenuation, _ShadowReceive);
    lns.w = lns.x;
    lns.w = saturate(lilTooningNoSaturateScale(antialias, lns.x, _ShadowBorder, _ShadowBlur, _ShadowBorderRange));
    lns.x = saturate(lilTooningNoSaturateScale(antialias, lns.x, _ShadowBorder, _ShadowBlur));
    col = lerp(light.color * lerp(1.0, _ShadowColor.rgb, _ShadowColor.a), col, lns.x);

    //layer 2
    lns.y = saturate(dot(light.direction, giInput.normalWS) * 0.5 + 0.5);
    lns.y *= lerp(defaultAtten, light.attenuation, _Shadow2ndReceive);
    lns.y = saturate(lilTooningNoSaturateScale(antialias, lns.y, _Shadow2ndBorder, _Shadow2ndBlur));
    col = lerp(light.color * lerp(1.0, _Shadow2ndColor.rgb, _Shadow2ndColor.a), col, lns.y);

    //layer 3
    lns.z = saturate(dot(light.direction, giInput.normalWS) * 0.5 + 0.5);
    lns.z *= lerp(defaultAtten, light.attenuation, _Shadow3rdReceive);
    lns.z = saturate(lilTooningNoSaturateScale(antialias, lns.z, _Shadow3rdBorder, _Shadow3rdBlur));
    col = lerp(light.color * lerp(1.0, _Shadow3rdColor.rgb, _Shadow3rdColor.a), col, lns.z);

    col = lerp(col, light.color, lns.w * _ShadowBorderColor.rgb);

    lns = lerp(1.0, lns, _ShadowStrength);

    #ifdef _TOONSHADOW
        giOutput.directDiffuse += col;
    #else
        giOutput.directDiffuse += light.color * defaultAtten;
    #endif
}

float OpenLitGray(float3 rgb)
{
    return dot(rgb, float3(1.0/3.0, 1.0/3.0, 1.0/3.0));
}

// should be moved to another func for indirect diffuse when its added so it runs earlier
#define CUSTOM_COLOR
COLOR_FUNC // args: surf, fragData, giInput, giOutput
{
    #if defined(UNITY_PASS_FORWARDBASE)
        float3 sh9Dir = unity_SHAr.xyz + unity_SHAg.xyz + unity_SHAb.xyz;
        float3 sh9DirAbs = float3(sh9Dir.x, abs(sh9Dir.y), sh9Dir.z);
        half3 N = normalize(sh9DirAbs);
        UNITY_FLATTEN
        if (!any(unity_SHC.xyz))
        {
            N = 0;
        }
        half3 l0l1 = SHEvalLinearL0L1(float4(N, 1));
        half3 l2 = SHEvalLinearL2(float4(N, 1));
        half3 indirectColor = l0l1 + l2;

        Light lightprobe = (Light)0;
        lightprobe.color = indirectColor;
        lightprobe.direction = N;
        lightprobe.attenuation = 1.0;
        lightprobe.ComputeData(fragData, giInput);
        // LightCustom(lightprobe, fragData, giInput, surf, giOutput);
        giOutput.indirectOcclusion = 1.0;
    #endif

    half3 lightColor = giOutput.directDiffuse;

    // half lightRenorm = max(max(lightColor.r, lightColor.g), lightColor.b);
    // if (lightRenorm > _LightMaxLimit)
    // {
    //     lightColor /= lightRenorm / _LightMaxLimit;
    // }
    lightColor = min(_LightMaxLimit, lightColor);
    lightColor = max(_LightMinLimit, lightColor);
    lightColor = lerp(lightColor, OpenLitGray(lightColor), _MonochromeLighting);

    // swap to apply ao
    giOutput.directDiffuse = 0;
    giOutput.indirectDiffuse = lightColor;
    half4 color = COLOR_DEFAULT;
    
    return color;
}


// MIT License

// Copyright (c) 2020-2024 lilxyzw

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.